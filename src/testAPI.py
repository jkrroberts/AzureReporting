from datetime import datetime
import base64

import requests

# Replace with your Azure DevOps organization name and project name
organization = "longtermcaregroup"
project = "LTCG"
# Token generated by the Azdo system
personal_access_token = "cnp3iradt6t5hm3jlvaq4uhb32ezmzhecpt4hnedrvj2j4cz32gq"
# This is required for the connection but is not clearly documented.
username = 'jeffroberts@illumifin.com'
# combines the ussername and the PAT
combined_pat_token = username + ":" + personal_access_token
# encodes the entire token in base64
combined_pat_token_b64 = base64.b64encode(combined_pat_token.encode()).decode()

# print(combined_pat_token_b64)

# Calculate the date in the format that Azure DevOps API expects (YYYY-MM-DDTHH:MM:SSZ)
since_date = datetime(2023, 10, 11).strftime("%Y-%m-%dT%H:%M:%SZ")

# Construct the URL to query work items
url = f"https://dev.azure.com/{organization}/{project}/_apis/wit/wiql?api-version=7.1-preview.2"

work_item_id = 114974
# Define the Azure DevOps REST API endpoint for the specific work item
url_work_item = f"https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/{work_item_id}?api-version=7.1"

# Create the Work Item Query Language (WIQL) query to fetch user stories
query = {
#    "query": "SELECT [System.Id], [System.Title], [Custom.StoryPoints] FROM WorkItems WHERE [System.WorkItemType] = 'User Story' AND [System.State] <> 'Removed' ORDER BY [System.CreatedDate] DESC"
#    "query": "SELECT [System.Id], [System.Title], [Custom.StoryPoints] FROM WorkItems WHERE [System.WorkItemType] = 'User Story' AND [System.ChangeDate] > '2023-10-12'"
    "query": f"SELECT [System.Id], [System.Title], [System.AssignedTo] FROM WorkItems WHERE [System.WorkItemType] = 'User Story' AND [System.ChangedDate] >= '{since_date}'"
#    "query": f"SELECT [System.Id], [System.Title] FROM WorkItems WHERE [System.WorkItemType] = 'User Story' AND [System.Id] = 306738"

}

headers = {
    "Authorization": f"Basic {combined_pat_token_b64}"
}

response = requests.post(url, json=query, headers=headers)

response_data = response.json()  # Assuming response.json() returns a dictionary
keys = response_data.keys()

response = requests.get(url_work_item, headers=headers)
response_work_item = requests.get(url_work_item, headers=headers)

if response.status_code == 200:
    work_items = response.json()["fields"]
    #work_items = response.json()["workItems"]
    for item in work_items:
        iteration = work_items["System.IterationPath"]
#        story_id = item["id"]
#        print(story_id)
#        story_title = item["fields"]["System.Title"]
#        story_points = item["fields"]["Custom.StoryPoints"]
#        print(f"ID: {story_id}, Title: {story_title}")
else:
    print(f"Error: {response.status_code} - {response.text}")